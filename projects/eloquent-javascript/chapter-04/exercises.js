////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step) {
  var range = [];

  if (start === end) {
    return [];
  }

  if (step === undefined) {
    for (var i = start; i <= end; i++) {
      range.push(i);
    }
  } else {
    if (step < 0) {
      return [];
    } else {
      for (let i = start; i <= end; i+= step) {
        range.push(i);
      }
    }

  }
  return range;
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(number) {
  var total = 0;
  for (var i = 0; i < number.length; i++) {
    total += number[i]
  }
  return total;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
  var copy = [...array]
  return copy.reverse();
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  return array.reverse();
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  if (array.length <= 0) {
    return null;

  }
  return { value: array[0], rest: arrayToList(array.slice(1)) }
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

  function listToArray(list) {
    let array = [];
    for (let node = list; node; node = node.rest) {
      array.push(node.value);
    }
    return array;
  }




////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


  function prepend(value, list) {
    return {value, rest: list};
  }


////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


  function nth(list, n) {
    if (!list) return undefined;
    else if (n == 0) return list.value;
    else return nth(list.rest, n - 1);
  }


////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(x, y) {
  // if x and y are not objects // numbers, strings
  if ( typeof x !== 'object' && typeof y !== 'object'){
    return x === y;
  }
  if ( typeof x !== 'object' || typeof y !== 'object'){
    return false;
  }

  let xkeys = Object.keys(x);
  let ykeys = Object.keys(y); 
  
  if ( xkeys.length !== ykeys.length) { 
    return false;
  }
for ( var i = 0; i < xkeys.length; i++){
  if ( !ykeys.includes(xkeys[i]) || !deepEqual(x[xkeys[i]], y[ykeys[i]])){
      return false
  }
}
return true;
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
